
 G_LOCAL.H and go to the gclient_s structure. 


        int                     weapon_sound;



        float           pickup_msg_time;



        float           respawn_time;           // can respawn when time > this



+        //SBOF: chasecam variables

+        int             chasetoggle;

+        edict_t         *chasecam;

+        edict_t         *oldplayer;



} gclient_t;
EXPLANATION: 
These new variables we just added are now accessible via 
(entity name)->client->chasetoggle, 
(entity name)->client->chasecam, and 
(entity name)->client->oldplayer. 
The chasetoggle is a number which we can use to determine whether the camera is 
on or not, while the others are entities that are easier to access via 
personally linked variables. The oldplayer entity is an entity which is used for 
display purposes to the person who is using the chasecam. This we will come to 
later. 


NEXT STEP: 
Still in the G_LOCAL.H file, go to the edict_s structure. Again, if you do not 
know what I'm talking about, go to around line 870. Go to the bottom of the 
structure and add: 
        gitem_t         *item;                  // for bonus items



        // common data blocks

        moveinfo_t              moveinfo;

        monsterinfo_t   monsterinfo;



+        //SBOF: Chasecam variables

+        int                     chasedist1;

+        int                     chasedist2;



};

EXPLANATION: 
These two integer values are for the chasecam to determine distances between the 
camera entity and the player. I shouldn't really say this, but they're not as 
important, really, as the chasecam and oldplayer entities, nor the toggle, 
because they are only called by one function, and are used by an entity which is 
not a client, which therefore disables the ability to edit the chascam's 
->client variables as the camera is NOT a client. (Human player) 
These variables are accessed as (entity)->chasedist? and can be used for other 
integer functions in the same (entity)->chasedist? fields. 

NEXT STEP: 
Go to the very bottom of G_LOCAL.H and add : 

extern void CheckChasecam_Viewent(edict_t *ent);

EXPLANATION: 
This becomes a global function which tells the compiler that it SHOULD be define 
later in the code and not to worry if it comes across it being mentioned before 
the routine is defined. 


EXPLANATION: 
Read the comments, but the last line where it "links" the entity, makes sure 
that the game updates the state of the oldplayer entity model. The last line 
here is fairly important. 
Well, that's it for "S_CAM.C". Close "S_CAM.C" and open up G_CMDS.C for the 
implentation of toggling the chasecam. 


NEXT STEP: 
Scroll down to the ClientCommand() routine which handles all the... umm... 
commands and add in these lines: 
        else if (Q_stricmp (cmd, "wave") == 0)

                Cmd_Wave_f (ent);



+    //SBOF: well, gee.... I'm not sure.

+        else if (Q_stricmp (cmd, "chasecam") == 0)

+                Cmd_Chasecam_Toggle (ent);


EXPLANATION: 
Now, this will activate the ability to type "CMD chasecam" at the console, or 
have this bound to a key to toggle the chasecam on and off. 

NEXT STEP: 
Close G_CMDS.C and open P_WEAPON.C. In this file you will add in the code so 
that when you change weapons when using the chasecam, the weapon will not appear 
in front of you. Scroll down to the ChangeWeapon() routine (about line 175) and 
go to the bottom of the function. Add in: 


                ent->client->ps.gunindex = 0;

                return;

        }



        ent->client->weaponstate = WEAPON_ACTIVATING;

        ent->client->ps.gunframe = 0;

+        if (!ent->client->chasetoggle)

                ent->client->ps.gunindex = gi.modelindex(ent->client->pers.weapon->view_model);



}


EXPLANATION: 
This will check whether the chasecam is on, and it not, it will update the 
weapon model you see on the screen with the model associated with your current 
weapon. 

NEXT STEP: 
NB: This step is _*the*_ most important step of all. This is the step that has 
replaced the original Quake I WriteEntity() function that many people have been 
musing over. I have finally figured it out after months of "musing", and found 
that the LITERAL origin of the client display which is sent to the screen, each 
co-ordinate, MUST be multiplied by 8 to become a valid origin point in regards 
to the viewport.


p_view.c

Change: 
        VectorAdd (v, ent->client->kick_origin, v);



        // absolutely bound offsets

        // so the view can never be outside the player box



        if (v[0] < -14)

                v[0] = -14;

        else if (v[0] > 14)

                v[0] = 14;

        if (v[1] < -14)

                v[1] = -14;

        else if (v[1] > 14)

                v[1] = 14;

        if (v[2] < -22)

                v[2] = -22;

        else if (v[2] > 30)

                v[2] = 30;



        VectorCopy (v, ent->client->ps.viewoffset);

}
To: 
        VectorAdd (v, ent->client->kick_origin, v);



        // absolutely bound offsets

        // so the view can never be outside the player box



        if (!ent->client->chasetoggle)

        {

                if (v[0] < -14)

                        v[0] = -14;

                else if (v[0] > 14)

                        v[0] = 14;

                if (v[1] < -14)

                        v[1] = -14;

                else if (v[1] > 14)

                        v[1] = 14;

                if (v[2] < -22)

                        v[2] = -22;

                else if (v[2] > 30)

                        v[2] = 30;

        }

        else

        { 

                VectorSet (v, 0, 0, 0);

                if (ent->client->chasecam != NULL)

                {

                        ent->client->ps.pmove.origin[0] = ent->client->chasecam->s.origin[0]*8;

                        ent->client->ps.pmove.origin[1] = ent->client->chasecam->s.origin[1]*8;

                        ent->client->ps.pmove.origin[2] = ent->client->chasecam->s.origin[2]*8;

                        VectorCopy (ent->client->chasecam->s.angles, ent->client->ps.viewangles);

                }

        }

        VectorCopy (v, ent->client->ps.viewoffset);

}


 
NEXT STEP: 
Go to the very bottom of the file, and in the very bottom of the function called 
ClientEndServerFrame(), add this before the final "}": 

        if (ent->client->chasetoggle == 1)

                CheckChasecam_Viewent(ent);

 
NEXT STEP: 
p_client.c file  


Goto the respawn function 
         void respawn (edict_t *self) 
        { 
        // Added by WarZone - Begin 
                if (self->client->oldplayer) 
                        G_FreeEdict (self->client->oldplayer); 
                if (self->client->chasecam) 
                        G_FreeEdict (self->client->chasecam); 
        // Added by WarZone - End 
        ... rest of respawn function follows (no changes) ... 
  
Now, goto PutClientInServer and add the indicated line: 
  
  void PutClientInServer (edict_t *ent) 
  { 
       ... 
       // clear entity values 
       ent->groundentity = NULL; 
       ent->client = &game.clients[index]; 
       ent->takedamage = DAMAGE_AIM; 
       ent->movetype = MOVETYPE_WALK; 
       ent->viewheight = 22; 
       ent->inuse = true; 
       ent->classname = "player"; 
       ent->mass = 200; 
       ent->solid = SOLID_BBOX; 
       ent->deadflag = DEAD_NO; 
       ent->air_finished = level.time + 12; 
       ent->clipmask = MASK_PLAYERSOLID; 
       ent->model = "players/male/tris.md2"; 
       ent->pain = player_pain; 
       ent->die = player_die; 
       ent->waterlevel = 0; 
       ent->watertype = 0; 
       ent->flags &= ~FL_NO_KNOCKBACK; 
       ent->svflags &= ~SVF_DEADMONSTER; 
  +   ent->svflags &= ~SVF_NOCLIENT; 
       ... 
  }
Save and exit. You're done. (I hope I haven't left anything out) 
Some ideas to work on on your own (hehehe, two on's in a row) might be: 
  Allowing the player to view other players with the chase camera (ala RA2) - 
  Medium 
  Make the camera free floating, rather than bound to the player's perspective - 
  Hard (I think, maybe not) 
  Try making the camera work even when in water - I am positive that this can be 
  done, I'm just lazy... - Hard (again, it might not be that hard in reality) 
  Add in a feature to allow the game DLL to force someone's camera to turn on in 
  certain situations (cool effect) - Easy 
  Add in a "zoomin" and "zoomout" feature to the chase camera to allow players 
  to have control over how close behind the camera follows (just don't let them 
  zoom too far out, or it'll look really crappy, try it and see what I mean. For 
  that matter, don't let them get too close either!) - Easy 
Have fun with this, and email me (WarZone) if you plan to use this tutorial in 
your mod. I would like to keep track of which mods are using this, and I 
encourage you to do so. Having a chase camera in your mod really adds an extra 
dimention to the mod. Happy coding! 
  
Tutorial by sATaN  and WarZone. 
      This site, and all content and graphics displayed on it,
      are ©opyrighted to the Quake DeveLS team. All rights received.
      Got a suggestion? Comment? Question? Hate mail? Send it to us!
      Oh yeah, this site is best viewed in 16 Bit or higher, with the resolution 
      on 800*600.
      Thanks to Planet Quake for their great help and support with hosting.
      Best viewed with Netscape 4
  
